// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import nodemailer from 'nodemailer';
import { GoogleSpreadsheet } from 'google-spreadsheet';

export default async function handler(req, res) {
    const toEmail = req.body.email;
    const fromEmail = '"Verste Team" <versteteam@gmail.com>';
    const text = `
        Hello!

        <br />
        <br />

        We are so excited that you are interested in Verste! Our goal is simple: allow users to translate books, simplify hard-to-read texts, and transcribe videos for volunteer hours! Our team is working hard on Verste, please follow us on social media for updates.  We are also accepting new <a href="https://verste.org/contribute" target="_blank">contributors</a>!

        <br />
        <br />

        Sincerely,
        <br />
        Verste Team
        <br />
        <a href="https://www.instagram.com/teamverste/">Instagram</a>
        <a href="https://twitter.com/teamverste">Twitter</a>
        <a href="https://www.tiktok.com/@teamverste">TikTok</a>


    `;

    // create reusable transporter object using the default SMTP transport
    let transporter = nodemailer.createTransport({
        service: 'Gmail',
        auth: {
            user: process.env.VERSTE_EMAIL,
            pass: process.env.VERSTE_EMAIL_PASS
        }
    });

    // send mail with defined transport object
    let info = await transporter.sendMail({
        from: fromEmail, // sender address
        to: toEmail, // list of receivers
        subject: "Thanks for signing up for Verste!", // Subject line
        html: text // html body
    });


    const doc = new GoogleSpreadsheet('1jSTzPjWVXXz-6pUILP4IVFMQy5SqNzvg4sEgArsd6dg');
    const sheetType = req.body.sheetType;
    await doc.useServiceAccountAuth({
        // env var values are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        private_key: process.env.GOOGLE_PRIVATE_KEY,
    });


    await doc.loadInfo(); // loads document properties and worksheets

    const index = doc.sheetsByIndex.findIndex(sheet => sheet.title === sheetType);

    const sheet = doc.sheetsByIndex[index]; // or use doc.sheetsById[id]
    const date = new Date().toLocaleDateString("en-US");
    await sheet.addRow({ Timestamp: date, Email: toEmail });




    if (info.accepted.length > 0) {
        res.status(200).json({
            accepted: true
        });
    }
    else {
        res.status(200).json({
            accepted: false
        });
    }
}
